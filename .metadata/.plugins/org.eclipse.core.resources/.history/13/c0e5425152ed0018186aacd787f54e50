'''
Created on Nov 19, 2018

@author: Krishnakanth M
'''

import math
import os
import random
import re
import sys

class SinglyLinkedListNode:
    def __init__(self, node_data):
        self.data = node_data
        self.next = None

class SinglyLinkedList:
    def __init__(self):
        self.head = None
        self.tail = None

    def insert_node(self, node_data):
        node = SinglyLinkedListNode(node_data)

        if not self.head:
            self.head = node
        else:
            self.tail.next = node


        self.tail = node

def print_singly_linked_list(node, sep1):
    while node:
        print(str(node.data), end=sep1)

        node = node.next

        

# Complete the mergeLists function below.

#
# For your reference:
#
# SinglyLinkedListNode:
#     int data
#     SinglyLinkedListNode next
#
#
def mergeLists(head1, head2):
    
    
    llist3 = SinglyLinkedList();
    while(head1 and head2):
        
        if(head1.data < head2.data):
            llist3.insert_node(head1.data);
            head1= head1.next;
        elif(head1.data > head2.data):
            llist3.insert_node(head2.data);
            head2 = head2.next;
        else:
            llist3.insert_node(head1.data);
            llist3.insert_node(head2.data);
            head1 = head1.next
            head2 = head2.next
            
    if not head1 and head2:
        llist3.insert_node(head2.data);
    if not head2 and head1:
        llist3.insert_node(head1.data);
    return llist3.head;


def getNode(head, positionFromTail):
    list1 = []
    if head is None:
        return head;
    while head:
        list1.append(head.data);
        head=head.next;
    return list1.reverse()[positionFromTail]



tests = int(input())

for tests_itr in range(tests):
    llist_count = int(input())

    llist = SinglyLinkedList()

    for _ in range(llist_count):
        llist_item = int(input())
        llist.insert_node(llist_item)

    position = int(input())

    result = getNode(llist.head, position)
    print((str(result) + '\n'));




